import os
import sys
from collections import deque

# 请在此输入您的代码
data = """01010101001011001001010110010110100100001000101010
00001000100000101010010000100000001001100110100101
01111011010010001000001101001011100011000000010000
01000000001010100011010000101000001010101011001011
00011111000000101000010010100010100000101100000000
11001000110101000010101100011010011010101011110111
00011011010101001001001010000001000101001110000000
10100000101000100110101010111110011000010000111010
00111000001010100001100010000001000101001100001001
11000110100001110010001001010101010101010001101000
00010000100100000101001010101110100010101010000101
11100100101001001000010000010101010100100100010100
00000010000000101011001111010001100000101010100011
10101010011100001000011000010110011110110100001000
10101010100001101010100101000010100000111011101001
10000000101100010000101100101101001011100000000100
10101001000000010100100001000100000100011110101001
00101001010101101001010100011010101101110000110101
11001010000100001100000010100101000001000111000010
00001000110000110101101000000100101001001000011101
10100101000101000000001110110010110101101010100001
00101000010000110101010000100010001001000100010101
10100001000110010001000010101001010101011111010010
00000100101000000110010100101001000001000000000010
11010000001001110111001001000011101001011011101000
00000110100010001000100000001000011101000000110011
10101000101000100010001111100010101001010000001000
10000010100101001010110000000100101010001011101000
00111100001000010000000110111000000001000000001011
10000001100111010111010001000110111010101101111000"""
data = data.split("\n")
data = [list(i) for i in data]
n = len(data)
m = len(data[0])
dirs = [
    lambda x, y: (x + 1, y, "D"),
    lambda x, y: (x, y - 1, "L"),
    lambda x, y: (x, y + 1, "R"),
    lambda x, y: (x - 1, y, "U"),
]
all_route = []

"""
方式一：dfs
跑不完，数组太大不适合用dfs
"""
vis = [[0 for _ in range(m)] for _ in range(n)]


def dfs(x, y, s):
    if x == n - 1 and y == m - 1:
        all_route.append(s)
        return
    vis[x][y] = 1
    for d in dirs:
        xx, yy, ss = d(x, y)
        if 0 <= xx < n and 0 <= yy < m and data[xx][yy] == "0" and vis[xx][yy] == 0:
            dfs(xx, yy, s + ss)
    vis[x][y] = 0


dfs(0, 0, "")
"""
方式二：bfs
bfs适合求最短路径
"""


def bfs(x, y):
    queue = deque()
    queue.append([x, y, ""])
    vis = [[0 for _ in range(m)] for _ in range(n)]
    vis[x][y] = 1
    flag = 0
    while len(queue) > 0:
        item = queue.popleft()
        if item[0] == n - 1 and item[1] == m - 1:
            flag = 1
            all_route.append(item[2])
        if flag == 0:
            for d in dirs:
                xx, yy, ss = d(item[0], item[1])
                if 0 <= xx < n and 0 <= yy < m and data[xx][yy] == "0" and vis[xx][yy] == 0:
                    queue.append([xx, yy, item[2] + ss])
                    vis[xx][yy] = 1


# bfs(0, 0)

all_route.sort(key=lambda x: (len(x), x))
print(all_route[0])
